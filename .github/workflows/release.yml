name: Release to Maven Central

on:
  workflow_dispatch:
    inputs:
      release-version:
        description: 'Release version (leave empty for automatic)'
        required: false
        type: string
      development-version:
        description: 'Next development version (leave empty for automatic)'
        required: false
        type: string

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.RELEASE_TOKEN }}
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
          server-id: central
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          # Configure git to use token authentication
          git config --global credential.helper store
          echo "https://x-access-token:${{ secrets.RELEASE_TOKEN }}@github.com" > ~/.git-credentials

      - name: Prepare release (with both versions)
        if: ${{ github.event.inputs.release-version != '' && github.event.inputs.development-version != '' }}
        run: |
          mvn release:prepare \
            -DreleaseVersion=${{ github.event.inputs.release-version }} \
            -DdevelopmentVersion=${{ github.event.inputs.development-version }} \
            -Dtag=v${{ github.event.inputs.release-version }} \
            --batch-mode \
            --no-transfer-progress
        env:
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Prepare release (with release version only)
        if: ${{ github.event.inputs.release-version != '' && github.event.inputs.development-version == '' }}
        run: |
          mvn release:prepare \
            -DreleaseVersion=${{ github.event.inputs.release-version }} \
            -Dtag=v${{ github.event.inputs.release-version }} \
            --batch-mode \
            --no-transfer-progress
        env:
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Prepare release (automatic versions)
        if: ${{ github.event.inputs.release-version == '' }}
        run: |
          mvn release:prepare \
            --batch-mode \
            --no-transfer-progress
        env:
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Perform release
        run: |
          mvn release:perform \
            -Prelease \
            --batch-mode \
            --no-transfer-progress
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Create GitHub Release from Tag
        run: |
          # Get the latest tag (created by maven-release-plugin)
          LATEST_TAG=$(git describe --tags --abbrev=0)
          gh release create $LATEST_TAG \
            --title "Release $LATEST_TAG" \
            --generate-notes
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}

      - name: Update README with new version
        run: |
          # Get the latest tag and extract version (remove 'v' prefix)
          LATEST_TAG=$(git describe --tags --abbrev=0)
          VERSION=${LATEST_TAG#v}

          # Update README.md version references
          sed -i "s/<version>.*<\/version>/<version>$VERSION<\/version>/g" README.md
          sed -i "s/validcheck-core:[0-9]\+\.[0-9]\+\.[0-9]\+/validcheck-core:$VERSION/g" README.md

          # Commit and push the README update
          git add README.md
          git commit -m "docs: update README.md with version $VERSION [skip ci]" || echo "No changes to commit"
          git push origin main

      - name: Announce release
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0)
          echo "ðŸŽ‰ Successfully released ValidCheck $LATEST_TAG to Maven Central!"
          echo "ðŸ“¦ Available at: https://central.sonatype.com/artifact/io.github.validcheck/validcheck-core"
